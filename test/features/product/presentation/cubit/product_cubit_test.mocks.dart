// Mocks generated by Mockito 5.4.2 from annotations
// in halalfood/test/features/product/presentation/cubit/product_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:halalfood/core/error/response.dart' as _i6;
import 'package:halalfood/features/product/domain/entities/helper/pagination_params.dart'
    as _i8;
import 'package:halalfood/features/product/domain/entities/product.dart' as _i7;
import 'package:halalfood/features/product/domain/repositories/product_repository.dart'
    as _i2;
import 'package:halalfood/features/product/domain/usecases/get_one_product_usecase.dart'
    as _i9;
import 'package:halalfood/features/product/domain/usecases/get_product_usecase.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeProductRepository_0 extends _i1.SmartFake
    implements _i2.ProductRepository {
  _FakeProductRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetProductUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProductUseCase extends _i1.Mock implements _i4.GetProductUseCase {
  MockGetProductUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeProductRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ProductRepository);
  @override
  set repository(_i2.ProductRepository? _repository) => super.noSuchMethod(
        Invocation.setter(
          #repository,
          _repository,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<_i3.Either<_i6.ResponseI, List<_i7.Product>>> call(
          _i8.PaginationParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.ResponseI, List<_i7.Product>>>.value(
                _FakeEither_1<_i6.ResponseI, List<_i7.Product>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.ResponseI, List<_i7.Product>>>);
}

/// A class which mocks [GetOneProductUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetOneProductUseCase extends _i1.Mock
    implements _i9.GetOneProductUseCase {
  MockGetOneProductUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeProductRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ProductRepository);
  @override
  set repository(_i2.ProductRepository? _repository) => super.noSuchMethod(
        Invocation.setter(
          #repository,
          _repository,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<_i3.Either<_i6.ResponseI, List<_i7.Product>>> call(int? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.ResponseI, List<_i7.Product>>>.value(
                _FakeEither_1<_i6.ResponseI, List<_i7.Product>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.ResponseI, List<_i7.Product>>>);
}
