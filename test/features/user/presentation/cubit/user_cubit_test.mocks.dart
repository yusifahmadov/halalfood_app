// Mocks generated by Mockito 5.4.2 from annotations
// in halalfood/test/features/user/presentation/cubit/user_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:dartz/dartz.dart' as _i3;
import 'package:flutter_bloc/flutter_bloc.dart' as _i13;
import 'package:halalfood/core/error/response.dart' as _i8;
import 'package:halalfood/features/auth/presentation/cubit/auth_cubit.dart'
    as _i4;
import 'package:halalfood/features/user/data/models/extended_user_model.dart'
    as _i14;
import 'package:halalfood/features/user/data/models/helper/signin_helper_model.dart'
    as _i12;
import 'package:halalfood/features/user/data/models/helper/signup_helper_model.dart'
    as _i10;
import 'package:halalfood/features/user/data/models/user_model.dart' as _i5;
import 'package:halalfood/features/user/domain/entities/user.dart' as _i16;
import 'package:halalfood/features/user/domain/entities/user_extended.dart'
    as _i9;
import 'package:halalfood/features/user/domain/repositories/user_repository.dart'
    as _i2;
import 'package:halalfood/features/user/domain/usecases/get_one_user_usecase.dart'
    as _i15;
import 'package:halalfood/features/user/domain/usecases/signin_usecase.dart'
    as _i11;
import 'package:halalfood/features/user/domain/usecases/signup_usecase.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserRepository_0 extends _i1.SmartFake
    implements _i2.UserRepository {
  _FakeUserRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthState_2 extends _i1.SmartFake implements _i4.AuthState {
  _FakeAuthState_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserModel_3 extends _i1.SmartFake implements _i5.UserModel {
  _FakeUserModel_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SignupUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignupUseCase extends _i1.Mock implements _i6.SignupUseCase {
  MockSignupUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeUserRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.UserRepository);
  @override
  set repository(_i2.UserRepository? _repository) => super.noSuchMethod(
        Invocation.setter(
          #repository,
          _repository,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i7.Future<_i3.Either<_i8.ResponseI, _i9.ExtendedUser>> call(
          _i10.SignUpHelperModel? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i7.Future<_i3.Either<_i8.ResponseI, _i9.ExtendedUser>>.value(
                _FakeEither_1<_i8.ResponseI, _i9.ExtendedUser>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.ResponseI, _i9.ExtendedUser>>);
}

/// A class which mocks [SignInUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignInUseCase extends _i1.Mock implements _i11.SignInUseCase {
  MockSignInUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeUserRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.UserRepository);
  @override
  set repository(_i2.UserRepository? _repository) => super.noSuchMethod(
        Invocation.setter(
          #repository,
          _repository,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i7.Future<_i3.Either<_i8.ResponseI, _i9.ExtendedUser>> call(
          _i12.SignInHelperModel? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i7.Future<_i3.Either<_i8.ResponseI, _i9.ExtendedUser>>.value(
                _FakeEither_1<_i8.ResponseI, _i9.ExtendedUser>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.ResponseI, _i9.ExtendedUser>>);
}

/// A class which mocks [AuthCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthCubit extends _i1.Mock implements _i4.AuthCubit {
  MockAuthCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.AuthState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAuthState_2(
          this,
          Invocation.getter(#state),
        ),
      ) as _i4.AuthState);
  @override
  _i7.Stream<_i4.AuthState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i7.Stream<_i4.AuthState>.empty(),
      ) as _i7.Stream<_i4.AuthState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  dynamic loggedIn(_i9.ExtendedUser? data) =>
      super.noSuchMethod(Invocation.method(
        #loggedIn,
        [data],
      ));
  @override
  void emit(_i4.AuthState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i13.Change<_i4.AuthState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i7.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [ExtendedUserModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockExtendedUserModel extends _i1.Mock implements _i14.ExtendedUserModel {
  MockExtendedUserModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get accessToken => (super.noSuchMethod(
        Invocation.getter(#accessToken),
        returnValue: '',
      ) as String);
  @override
  String get refreshToken => (super.noSuchMethod(
        Invocation.getter(#refreshToken),
        returnValue: '',
      ) as String);
  @override
  _i5.UserModel get user => (super.noSuchMethod(
        Invocation.getter(#user),
        returnValue: _FakeUserModel_3(
          this,
          Invocation.getter(#user),
        ),
      ) as _i5.UserModel);
  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
      ) as List<Object?>);
  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [GetOneUserUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetOneUserUseCase extends _i1.Mock implements _i15.GetOneUserUseCase {
  MockGetOneUserUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeUserRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.UserRepository);
  @override
  set repository(_i2.UserRepository? _repository) => super.noSuchMethod(
        Invocation.setter(
          #repository,
          _repository,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i7.Future<_i3.Either<_i8.ResponseI, List<_i16.User>>> call(String? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i7.Future<_i3.Either<_i8.ResponseI, List<_i16.User>>>.value(
                _FakeEither_1<_i8.ResponseI, List<_i16.User>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.ResponseI, List<_i16.User>>>);
}
